#+TITLE: The Emacs Operating System
#+EXPORT_FILE_NAME: docs/index.html
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+OPTIONS: toc:3 author:nil date:nil html-postamble:nil result:nil

** Table of contents                                      :TOC_5_gh:noexport:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
  - [[#initialization][Initialization]]
    - [[#basics][Basics]]
    - [[#emacs-backups][Emacs Backups]]
  - [[#packages][Packages]]
    - [[#intialize-packages][Intialize packages]]
    - [[#appearence][Appearence]]
      - [[#themes][Themes]]
      - [[#dashboard][Dashboard]]
      - [[#modeline][Modeline]]
    - [[#evil-mode][Evil Mode]]
    - [[#org-mode][Org Mode]]
      - [[#org-toc][Org TOC]]
      - [[#org-babel][Org Babel]]
      - [[#org-hugoox-hugo][Org Hugo(ox-hugo)]]
      - [[#org-roam][Org Roam]]
        - [[#full-text-search-with-deft][Full text search with Deft]]
      - [[#org-export-settingshtmlize][Org export settings(htmlize)]]
      - [[#human-readable-ids][Human readable IDs]]
    - [[#projectile][Projectile]]
    - [[#source-control][Source Control]]
      - [[#magit][Magit]]
    - [[#completions][Completions]]
      - [[#ivy-rich][Ivy rich]]
      - [[#hydra][Hydra]]
      - [[#which-key][Which-key]]
  - [[#system-configuration][System configuration]]
    - [[#emacs-environment-variables][Emacs environment variables]]
  - [[#keybindings][KeyBindings]]
    - [[#global-constants][Global constants]]
    - [[#a-leader][A leader]]
    - [[#random-goodness][Random goodness]]
  - [[#programming-stuff][Programming stuff]]
    - [[#lsp-mode][LSP mode]]
    - [[#yaml][Yaml]]
    - [[#go][Go]]

** Initialization
:PROPERTIES:
:CUSTOM_ID: initialization
:END:
*** Basics
:PROPERTIES:
:CUSTOM_ID: basics
:END:
- Menu and toolbars

#+BEGIN_SRC elisp
  (scroll-bar-mode -1)                  ; Disable visible scrollbar
  (tool-bar-mode -1)                    ; Disable tool bar
  (tooltip-mode -1)                     ; Disable tooltip
  (set-fringe-mode 30)                  ; Give some breathing room?
  (menu-bar-mode -1)                    ; Go full spartan
#+END_SRC


- Scroll Emacs

#+BEGIN_SRC elisp
(setq scroll-step    1
    scroll-conservatively 10000)
#+END_SRC

- Set up the visible bell

#+BEGIN_SRC elisp
(setq visible-bell t)
#+END_SRC

- Set Fonts

#+BEGIN_SRC elisp
  (set-face-attribute 'default nil :font "Cascadia Code PL" :height 180)
#+END_SRC


- Display line numbers

#+BEGIN_SRC elisp
(global-display-line-numbers-mode t)

;; We don't want line numbers everywhere, e.g shell
(dolist (mode '(org-hook-mode
                term-mode-hook
                eshell-mode-hook
                shell-mode-hook))
  (add-hook mode(lambda() (display-line-numbers-mode 0))))
#+END_SRC

- Truncate long lines in certain modes
  
#+BEGIN_SRC elisp
(add-hook 'org-mode-hook (lambda() (setq truncate-lines nil)))
#+END_SRC

- Display a vertical line on 80th character

  #+begin_src elisp
(setq-default display-fill-column-indicator-column 79)
(global-display-fill-column-indicator-mode 1)
  #+end_src

- Start emacs in a fullscreen mode
  
#+begin_src elisp
;; start the initial frame maximized
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; start every frame maximized
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

*** Emacs Backups
:PROPERTIES:
:CUSTOM_ID: emacs-backups
:END:

Backup in one place. flat, no tree structure
#+begin_src elisp
(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))
#+end_src

** Packages
:PROPERTIES:
:CUSTOM_ID: packages
:END:
*** Intialize packages
:PROPERTIES:
:CUSTOM_ID: intialize-packages
:END:

- Initialize Melpa

#+BEGIN_SRC elisp
  (require 'package)
  (setq package-archives '(("elpa"   . "https://elpa.gnu.org/packages/")
			   ("melpa"  . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

- Install local packages manually

  TODO
  - Certain packages are needed to be installed maually, e.g tomelr
    
*** Appearence
:PROPERTIES:
:CUSTOM_ID: appearence
:END:

**** Themes

Doom Emacs has consolidated a bunch of nice looking themes, we would
like to get them all.

#+BEGIN_SRC elisp
  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-old-hope t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-solarized-light") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+END_SRC


I love how Org files look with poet theme, so it's a must.

#+begin_src elisp
  (use-package poet-theme)
#+end_src

**** Dashboard

We would need emacs-dashboard package for an easier configuration.

#+begin_src elisp
  (use-package dashboard
    :config
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    :init
    (dashboard-setup-startup-hook))

#+end_src

**** Modeline

A custom modeline until we figure out the issue with doom-modeline.
#+begin_src elisp
  (set-face-attribute 'mode-line nil
		      :background "#353644"
		      :foreground "white"
		      :box '(:line-width 8 :color "#353644")
		      :overline nil
		      :underline nil)

  (set-face-attribute 'mode-line-inactive nil
		      :background "#565063"
		      :foreground "white"
		      :box '(:line-width 8 :color "#565063")
		      :overline nil
		      :underline nil)
#+end_src

Show the git branch on the mode-line

#+begin_src elisp
  ;; (defun vc-branch ()
  ;;   (let ((backend (vc-backend buffer-file-name)))
  ;;     (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))))
  ;; (vc-branch)
#+end_src




#+begin_src elisp
  (use-package all-the-icons
    :ensure t)

  ;; (use-package doom-modeline
  ;; :init (doom-modeline-mode 1)
  ;; :custom ((doom-modeline-height 30)))
#+end_src

*** Evil Mode
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:

- Since I have been using VI for quite sometime now, I don't want to
  train myself to learn Emacs

#+BEGIN_SRC elisp
;; package: evil
;; First thing first. Be EVIL!
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))


;; package: evil-collection
;; Now be EVIL on every mode
;; TODO: Doesn't work
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

Unbind certain keys.

#+begin_src elisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

*** Org Mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

Org mode is probably the best thing happened to the mankind. j/k
By default Org mode doesn't look very nice, at least not as a word
processor. Our goal is to make it look like one.

Enable indentation(org-indent-mode). To control individual files, use
=#+STARTUP: indent= or =#+STARTUP: noindent=.

#+begin_src elisp
  (setq org-startup-indented t)
#+end_src

Set a conservative indentation, By default the value is set to 2

#+begin_src elisp
  (setq org-indent-indentation-per-level 2)
#+end_src

Emacs shouldn't add whitespace to indent text.

#+begin_src elisp
  (setq org-adapt-indentation nil)
#+end_src

RETURN will follow links in org mode.

#+begin_src elisp
  (setq org-return-follows-link  t)
#+end_src


There are a couple of nice blog posts on beautifying the Org mode,
but I plan to go with the "org-modern" package. It looks nice enough for
now. However, Certain features don't work wit org-indent-mode, which I
have turned on.

#+BEGIN_SRC elisp
  (use-package org-modern
    :config
    (global-org-modern-mode))

  ;; For shorthand completions, lile <s-TAB for source code blocks.
  (require'org-tempo)
#+END_SRC

**** Org TOC

Create table of contents for Org files.
Usage:
- Add table of content tags such as =TOC_2= and =TOC_2_gh=
- While at the TOC entry call =M-x org-open-at-point= (=C-c C-o=) to
jump to the corresponding heading.

ref: [[https://github.com/snosov1/toc-org][toc-org]]
#+begin_src elisp
  (use-package toc-org
    :hook (org-mode . toc-org-enable)
    :config
    (setq toc-org-hrefify-default "gh"))
#+end_src

**** Org Babel

Active Babel languages

;; TODO

#+begin_src elisp
  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((C . t) (elisp . t) (python . t) ))
#+end_src

**** Org Hugo(ox-hugo)

ox-hugo helps me manage my website using org files.

I couldn't install =tomelr= package, using =use-package=, so had to
install it manually.

#+begin_src elisp

  (use-package ox-hugo
    :ensure t   ;Auto-install the package from Melpa
    :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
    :after ox)    

#+end_src

**** Org Roam

A sophisticated note taking mechanishm. Essentially a clone of
[[https://roamresearch.com/][Roam-research]] running on Emacs.

#+begin_src elisp
  (use-package org-roam
    :ensure t
    :pin melpa-stable)
#+end_src

Set the notes directory

#+begin_src elisp
  (setq org-roam-directory "~/dev/notes/org-roam")
#+end_src

***** Full text search with Deft

Deft is an Emacs mode for quickly browsing and filtering plain text
notes.

#+begin_src elisp
  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory))
#+end_src

**** Org export settings(htmlize)

Org mode usually ships with this package, However in certain cases you
might need to install it manually.

#+begin_src elisp

  (use-package htmlize
    :ensure t
    :init
    (setq org-html-htmlize-output-type 'css)
    (setq org-html-htmlize-font-prefix "org-"))

#+end_src


**** Human readable IDs

While exporting html, =org-html-export-to-html=  function generates
=IDs= for each header, so that it can get linked to from the Table of
contents. However, the default generated IDs aren't human-redable.

Also the default generated IDs can change every time you generate a new
version, which can be annoying while hosting a public website.

I have found some hacks on the internet and [[https://amitp.blogspot.com/2021/04/automatically-generate-ids-for-emacs.html][Amit Patel's]] implementation
seemed like the simplest.


#+begin_src elisp

  ;; The only dependency
  (use-package s
    :ensure t)

  (defun t/org-generate-custom-ids ()
    "Generate CUSTOM_ID for any headings that are missing one"
    (let ((existing-ids (org-map-entries 
                         (lambda () (org-entry-get nil "CUSTOM_ID")))))
      (org-map-entries
       (lambda ()
         (let* ((custom-id (org-entry-get nil "CUSTOM_ID"))
                (heading (org-heading-components))
                (level (nth 0 heading))
                (todo (nth 2 heading))
                (headline (nth 4 heading))
                (slug (t/title-to-filename headline))
                (duplicate-id (member slug existing-ids)))
           (when (and (not custom-id)
                      (< level 4)
                      (not todo)
                      (not duplicate-id))
             (message "Adding entry %s to %s" slug headline)
             (org-entry-put nil "CUSTOM_ID" slug)))))))

  (defun t/title-to-filename (title)
    "Convert TITLE to a reasonable filename."
    ;; Based on the slug logic in org-roam, but org-roam also uses a
    ;; timestamp, and I use only the slug. BTW "slug" comes from
    ;; <https://en.wikipedia.org/wiki/Clean_URL#Slug>
    (setq title (s-downcase title))
    (setq title (s-replace-regexp "[^a-zA-Z0-9]+" "-" title))
    (setq title (s-replace-regexp "-+" "-" title))
    (setq title (s-replace-regexp "^-" "" title))
    (setq title (s-replace-regexp "-$" "" title))
    title)
#+end_src


Run the function on save, while in org-mode.

#+begin_src elisp
  (add-hook 'after-save-hook 't/org-generate-custom-ids)
#+end_src


*** Projectile
:PROPERTIES:
:CUSTOM_ID: projectile
:END:

Projectile is instrumental in managing different projects and working
on them.

#+begin_src elisp

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

  (counsel-projectile-mode)

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/dev")
      (setq projectile-project-search-path '("~/dev"))
      (setq projectile-project-search-path '("~/rocket")))
    (setq projectile-switch-project-action #'projectile-dired))
  
#+end_src


*** Source Control
:PROPERTIES:
:CUSTOM_ID: source-control
:END:

**** Magit

The magical Git client for emacs. 

#+begin_src elisp
  (use-package magit
    :ensure t
    :pin melpa-stable)
#+end_src


*** Completions
:PROPERTIES:
:CUSTOM_ID: completions
:END:

#+begin_src elisp
  ;; package: ivy/counsel/swiper
  ;; Set up Ivy for better completions
  ;; Installing counsel will install ivy and swiper.
  (use-package counsel
    :diminish
    :bind (("C-s" . swiper)
	   ;; Counsel stuff
	   ("M-x" . counsel-M-x)
	   ("M-x" . counsel-M-x)
	   ("s-x" . counsel-M-x) ;; Super-X should do M-X
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-x C-r" . 'counsel-minibuffer-history)
	   :map ivy-minibuffer-map
	   ;; ("TAB" . ivy-alt-done)
	   ;; ("TAB" . ivy-partial-or-done)
	   ("C-f" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
					  ;(prescient-persist-mode 1)


    (ivy-prescient-mode 1))

  ;; Remove the "^" character from counsel-M-X 
  (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "") 
	   #+end_src


**** Ivy rich

A more friendly interface for Ivy.

#+begin_src elisp
  ;; package: ivy-rich
  ;; More friendly interface (display transformer) for ivy.
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; All the icons + Ivy
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src

**** Hydra

#+begin_src elisp
(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src

**** Which-key

It's a minor mode that shows kebindings for an incomplete command.

#+begin_src elisp
  (use-package which-key
    :init
    (which-key-mode))
#+end_src

** System configuration
:PROPERTIES:
:CUSTOM_ID: system-configuration
:END:

*** Emacs environment variables
:PROPERTIES:
:CUSTOM_ID: emacs-environment-variables
:END:

Ensure Emacs env variables match system variables.

#+begin_src elisp
  (use-package exec-path-from-shell
    :ensure t)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

** KeyBindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:

Custom keybindings for emacs. This section is expected to be edited
frequently, as my requirements evolve.

*** Global constants
:PROPERTIES:
:CUSTOM_ID: global-constants
:END:

#+begin_src elisp
  
  (defconst t-version "0.0.1-a0"
    "Current version of the tmacs.")


  ;; DEPRECATED
  (defconst IS-MAC      (eq system-type 'darwin))
  (defconst IS-LINUX    (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS  (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst IS-BSD      (memq system-type '(darwin berkeley-unix gnu/kfreebsd)))


#+end_src

*** A leader
:PROPERTIES:
:CUSTOM_ID: a-leader
:END:

Both Doom and Spacemacs use a leader key as a prefix to many commands.

Inspiration: [[https://github.com/doomemacs/doomemacs/blob/e0385052a8004ec54a402c27357b1352840eb798/lisp/doom-keybinds.el][Doom keybindings]]

#+begin_src elisp

  (defvar t-leader-key "SPC"
  "The leader prefix key for Evil users.")

#+end_src

Mac =command= should act like =super=


#+begin_src elisp
  ;; (cond
  ;;  (IS-MAC
  ;;   ;; mac-* variables are used by the special emacs-mac build of Emacs by
  ;;   ;; Yamamoto Mitsuharu, while other builds use ns-*.
  ;;   (setq mac-command-modifier      'super
  ;; 	ns-command-modifier       'super
  ;; 	mac-option-modifier       'meta
  ;; 	ns-option-modifier        'meta
  ;; 	;; Free up the right option for character composition
  ;; 	mac-right-option-modifier 'none
  ;; 	ns-right-option-modifier  'none))
  ;;  (IS-WINDOWS
  ;;   (setq w32-lwindow-modifier 'super
  ;; 	w32-rwindow-modifier 'super)))
#+end_src

*** Random goodness
:PROPERTIES:
:CUSTOM_ID: random-goodness
:END:

- =ESC= Quit prompts

  #+begin_src elisp
(global-set-key  (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src

** Programming stuff
:PROPERTIES:
:CUSTOM_ID: programming-stuff
:END:

This section has configurations for various programming language modes.

*** LSP mode
:PROPERTIES:
:CUSTOM_ID: lsp-mode
:END:

Language Server Protocol can provide IDE like support for multiple
programming languages on Emacs.

#+begin_src elisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (XXX-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; lsp-ui
  (use-package lsp-ui :commands lsp-ui-mode)

  ;; lsp-ivy bindings
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src


*** Yaml
:PROPERTIES:
:CUSTOM_ID: yaml
:END:

Emacs should automatically switch on to yaml-mode while editing =yml=
or =yaml= files.

#+begin_src elisp
  (use-package yaml-mode
  :ensure t
  :init
  (push '("\\.yaml$" . yaml-mode) auto-mode-alist))

#+end_src


*** Go
:PROPERTIES:
:CUSTOM_ID: go
:END:

#+begin_src elisp
  (use-package go-mode
    :ensure t
    :init
    (push '("\\.go\\'" . go-mode) auto-mode-alist))
#+end_src

Lsp hooks for Go

#+begin_src elisp

  (defun lsp-go-install-save-hooks ()
    ;; Format before save
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    ;; Sort imports before save
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;; Start lsp mode
  (add-hook 'go-mode-hook #'lsp-deferred)

#+end_src
